
package Geometries;

import java.awt.Toolkit;
import java.awt.print.PrinterException;
import java.io.IOException;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Random;
import java.util.logging.Level;
import javax.swing.JOptionPane;
import javax.swing.JTextArea;

/**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 *<pre>
 Class          GeometriesGUI
 File           GeometriesGUI.java
 Description    Project 2-- Solves problems  3.1, 3.3, and 3.25 from text.
 *              The first JPanels allows the user to enter three vertices 
 *              for a triangle and it calculates and displays the perimeter and 
 *              area of the triangle In order to do so, a Triangle class must be
 *              constructed with appropriate constructors and methods. The 
 *              Triangle class, as well as the Circle and Rectangle class. The 
 *              next three JPanels allows the user to enter a radius for the
 *              circle, height and width or rectangle, and length, height, and
 *              width for parallelogram.
 * 
 *              Implement the given abstract GeometricObject class and derive 
 *              the three other well-designed classes (Triangle, Circle, and 
 *              Rectangle) from it. 
 * @author      <i>Leanne Vu</i>
 * Environment  PC, Windows 10, jdk1.8.0_241, Netbeans 11.3
 * Date     	2/12/2021
 * @version     1.2.1
 * @see         javax.swing.JFrame
 * @see         javax.awt.Toolkit
 * @see         javax.swing.JOptionPane
 * @see         java.text.DecimalFormat
 *</pre>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
public class GeometriesGUI extends javax.swing.JFrame {
    private StringBuilder output = new StringBuilder();
    private DecimalFormat twoDecimals = new DecimalFormat("#,##0.00");
    private boolean invalidInput = false;
    Triangle myTriangle;
    Circle myCircle;
    Rectangle myRectangle;
    Parallelogram myParallelogram;

   /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    *<pre>
    * Constructor   GeometriesGUI()
    * Description   Default constructor. Builds the GUI, creates instance of
    *               the class, sets the calculateJButton as the default button,
    *               and sets pi jpg  as icon for the GUI
    * @author       <i>Leanne Vu</i>
    * Date          2/12/2021
    *</pre>
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
    public GeometriesGUI() {
        initComponents();
        myTriangle = new Triangle();
        myCircle = new Circle();
        myRectangle = new Rectangle();
        myParallelogram = new Parallelogram();
        //set as image the Scalene.png
        this.setIconImage(Toolkit.getDefaultToolkit().
                getImage("src/Images/PI.jpg"));
        setDate();  //call a private method to set date in title bar
    }
    
   /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    *<pre>
    * Method        setDate()
    * Description   Private method to set current date in the title bar of main
    *               form in mm/dd/yyyy style
    * @author       <i>Leanne Vu</i>
    * Date          2/12/2021
    * @see          java.text.DateFormat
    * @see          java.text.SimpleDateFormat
    * @see          java.util.Date
    *</pre>
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
    private void setDate() {
        DateFormat dateFormat = new SimpleDateFormat("MM/dd/yyyy");
        Date date = new Date();
        
        //Include date (including format) in title
        this.setTitle("Project 2-- Geometric Calculations--" + dateFormat.format(date));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuItem1 = new javax.swing.JMenuItem();
        geometriesJTabbedPane = new javax.swing.JTabbedPane();
        mainJPanel = new javax.swing.JPanel();
        titleJLabel = new javax.swing.JLabel();
        selectJLabel = new javax.swing.JLabel();
        figureJComboBox = new javax.swing.JComboBox<>();
        triangleJLabel = new javax.swing.JLabel();
        circleJLabel = new javax.swing.JLabel();
        rectangleJLabel = new javax.swing.JLabel();
        parallelogramJLabel = new javax.swing.JLabel();
        triangleJPanel = new javax.swing.JPanel();
        triangleInputsJPanel = new javax.swing.JPanel();
        x1JLabel = new javax.swing.JLabel();
        x1JTextField = new javax.swing.JTextField();
        y1JLabel = new javax.swing.JLabel();
        y1JTextField = new javax.swing.JTextField();
        x2JLabel = new javax.swing.JLabel();
        x2JTextField = new javax.swing.JTextField();
        y2JLabel = new javax.swing.JLabel();
        y2JTextField = new javax.swing.JTextField();
        x3JLabel = new javax.swing.JLabel();
        x3JTextField = new javax.swing.JTextField();
        y3JLabel = new javax.swing.JLabel();
        y3JTextField = new javax.swing.JTextField();
        triangleInstructionsJScrollPane = new javax.swing.JScrollPane();
        instructionsJTextArea = new javax.swing.JTextArea();
        triangleCalculateJButton = new javax.swing.JButton();
        triangleResultJScrollPane = new javax.swing.JScrollPane();
        triangleResultJTextArea = new javax.swing.JTextArea();
        circleJPanel = new javax.swing.JPanel();
        circleInputsJPanel = new javax.swing.JPanel();
        radiusJLabel = new javax.swing.JLabel();
        radiusJTextField = new javax.swing.JTextField();
        circleInstructionsJScrollPane = new javax.swing.JScrollPane();
        circleInstructionsJTextArea = new javax.swing.JTextArea();
        circleResultJScrollPane = new javax.swing.JScrollPane();
        circleResultJTextArea = new javax.swing.JTextArea();
        circleCalculateJButton = new javax.swing.JButton();
        rectangleJPanel = new javax.swing.JPanel();
        rectangleInputsJPanel = new javax.swing.JPanel();
        widthJLabel = new javax.swing.JLabel();
        widthJTextField = new javax.swing.JTextField();
        heightJLabel = new javax.swing.JLabel();
        heightJTextField = new javax.swing.JTextField();
        rectangleInstructionsJScrollPane = new javax.swing.JScrollPane();
        rectangleInstructionsJTextArea = new javax.swing.JTextArea();
        rectangleCalculateJButton = new javax.swing.JButton();
        rectangleResultJScrollPane = new javax.swing.JScrollPane();
        rectangleResultJTextArea = new javax.swing.JTextArea();
        parallelogramJPanel = new javax.swing.JPanel();
        rectangleInputsJPanel1 = new javax.swing.JPanel();
        widthJLabel1 = new javax.swing.JLabel();
        widthJTextField1 = new javax.swing.JTextField();
        heightJLabel1 = new javax.swing.JLabel();
        heightJTextField1 = new javax.swing.JTextField();
        lengthJLabel = new javax.swing.JLabel();
        lengthJTextField = new javax.swing.JTextField();
        parallelogramInstructionsJScrollPane = new javax.swing.JScrollPane();
        parallelogramInstructionsJTextArea = new javax.swing.JTextArea();
        parallelogramCalculateJButton = new javax.swing.JButton();
        parallelogramResultJScrollPane = new javax.swing.JScrollPane();
        parallelogramResultJTextArea = new javax.swing.JTextArea();
        geometriesJMenuBar = new javax.swing.JMenuBar();
        fileJMenu = new javax.swing.JMenu();
        clearJMenuItem = new javax.swing.JMenuItem();
        printJMenuItem = new javax.swing.JMenuItem();
        printFormJMenuItem = new javax.swing.JMenuItem();
        exitJMenuItem = new javax.swing.JMenuItem();
        panelJMenu = new javax.swing.JMenu();
        mainJMenuItem = new javax.swing.JMenuItem();
        triangleJMenuItem = new javax.swing.JMenuItem();
        circleJMenuItem = new javax.swing.JMenuItem();
        rectangleJMenuItem = new javax.swing.JMenuItem();
        parallelogramJMenuItem = new javax.swing.JMenuItem();
        drawJMenu = new javax.swing.JMenu();
        drawTriangleJMenuItem = new javax.swing.JMenuItem();
        drawCircleJMenuItem = new javax.swing.JMenuItem();
        drawRectangleJMenuItem = new javax.swing.JMenuItem();
        helpJMenu = new javax.swing.JMenu();
        aboutJMenuItem = new javax.swing.JMenuItem();

        jMenuItem1.setText("jMenuItem1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Lab 6-- Triangles");
        setResizable(false);

        geometriesJTabbedPane.setTabPlacement(javax.swing.JTabbedPane.RIGHT);
        geometriesJTabbedPane.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                geometriesJTabbedPaneStateChanged(evt);
            }
        });

        mainJPanel.setBackground(new java.awt.Color(240, 250, 240));

        titleJLabel.setFont(new java.awt.Font("Tahoma", 2, 28)); // NOI18N
        titleJLabel.setForeground(new java.awt.Color(153, 0, 51));
        titleJLabel.setText("Welcome to Triangle Calculations");

        selectJLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        selectJLabel.setText("Select geometric figure:");

        figureJComboBox.setBackground(new java.awt.Color(255, 255, 204));
        figureJComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "<Select>", "Triangle ", "Circle ", "Rectangle", "Parallelogram ", " " }));
        figureJComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                figureJComboBoxItemStateChanged(evt);
            }
        });

        triangleJLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Triangle.png"))); // NOI18N
        triangleJLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                triangleJLabelMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                triangleJLabelMouseEntered(evt);
            }
        });

        circleJLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Circle.png"))); // NOI18N
        circleJLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                circleJLabelMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                circleJLabelMouseEntered(evt);
            }
        });

        rectangleJLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Rectangle.jpg"))); // NOI18N
        rectangleJLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                rectangleJLabelMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                rectangleJLabelMouseEntered(evt);
            }
        });

        parallelogramJLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Parallelogram.gif"))); // NOI18N
        parallelogramJLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                parallelogramJLabelMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                parallelogramJLabelMouseEntered(evt);
            }
        });

        javax.swing.GroupLayout mainJPanelLayout = new javax.swing.GroupLayout(mainJPanel);
        mainJPanel.setLayout(mainJPanelLayout);
        mainJPanelLayout.setHorizontalGroup(
            mainJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainJPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(triangleJLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(circleJLabel)
                .addGap(18, 18, 18)
                .addComponent(rectangleJLabel)
                .addGap(18, 18, 18)
                .addComponent(parallelogramJLabel)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainJPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(selectJLabel)
                .addGap(18, 18, 18)
                .addComponent(figureJComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(mainJPanelLayout.createSequentialGroup()
                .addGap(93, 93, 93)
                .addComponent(titleJLabel)
                .addContainerGap(94, Short.MAX_VALUE))
        );
        mainJPanelLayout.setVerticalGroup(
            mainJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainJPanelLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(titleJLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(mainJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(selectJLabel)
                    .addComponent(figureJComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(mainJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mainJPanelLayout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addComponent(rectangleJLabel))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainJPanelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(mainJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(triangleJLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(circleJLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(parallelogramJLabel, javax.swing.GroupLayout.Alignment.TRAILING))))
                .addGap(0, 66, Short.MAX_VALUE))
        );

        geometriesJTabbedPane.addTab("Main", mainJPanel);

        triangleJPanel.setBackground(new java.awt.Color(255, 255, 204));

        triangleInputsJPanel.setBackground(new java.awt.Color(255, 255, 204));
        triangleInputsJPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Verticies"));
        triangleInputsJPanel.setLayout(new java.awt.GridLayout(3, 4, 3, 3));

        x1JLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        x1JLabel.setText("x1:");
        triangleInputsJPanel.add(x1JLabel);

        x1JTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                x1JTextFieldActionPerformed(evt);
            }
        });
        triangleInputsJPanel.add(x1JTextField);

        y1JLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        y1JLabel.setText("y1:");
        triangleInputsJPanel.add(y1JLabel);

        y1JTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                y1JTextFieldActionPerformed(evt);
            }
        });
        triangleInputsJPanel.add(y1JTextField);

        x2JLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        x2JLabel.setText("x2:");
        triangleInputsJPanel.add(x2JLabel);

        x2JTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                x2JTextFieldActionPerformed(evt);
            }
        });
        triangleInputsJPanel.add(x2JTextField);

        y2JLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        y2JLabel.setText("y2:");
        triangleInputsJPanel.add(y2JLabel);

        y2JTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                y2JTextFieldActionPerformed(evt);
            }
        });
        triangleInputsJPanel.add(y2JTextField);

        x3JLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        x3JLabel.setText("x3:");
        triangleInputsJPanel.add(x3JLabel);

        x3JTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                x3JTextFieldActionPerformed(evt);
            }
        });
        triangleInputsJPanel.add(x3JTextField);

        y3JLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        y3JLabel.setText("y3:");
        triangleInputsJPanel.add(y3JLabel);

        y3JTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                y3JTextFieldActionPerformed(evt);
            }
        });
        triangleInputsJPanel.add(y3JTextField);

        instructionsJTextArea.setEditable(false);
        instructionsJTextArea.setColumns(20);
        instructionsJTextArea.setLineWrap(true);
        instructionsJTextArea.setRows(5);
        instructionsJTextArea.setText("Enter three verticies for a triangle to compute the perimeter and the area if the input is valid. Otherwise, display that the input is invalid. The input is valid if the sum of every pair of two edges is greater than the remaining edge.");
        instructionsJTextArea.setWrapStyleWord(true);
        triangleInstructionsJScrollPane.setViewportView(instructionsJTextArea);

        triangleCalculateJButton.setText("Calculate");
        triangleCalculateJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                triangleCalculateJButtonActionPerformed(evt);
            }
        });

        triangleResultJTextArea.setEditable(false);
        triangleResultJTextArea.setColumns(20);
        triangleResultJTextArea.setLineWrap(true);
        triangleResultJTextArea.setRows(5);
        triangleResultJTextArea.setWrapStyleWord(true);
        triangleResultJScrollPane.setViewportView(triangleResultJTextArea);

        javax.swing.GroupLayout triangleJPanelLayout = new javax.swing.GroupLayout(triangleJPanel);
        triangleJPanel.setLayout(triangleJPanelLayout);
        triangleJPanelLayout.setHorizontalGroup(
            triangleJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(triangleJPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(triangleJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(triangleInstructionsJScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 259, Short.MAX_VALUE)
                    .addComponent(triangleInputsJPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGroup(triangleJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(triangleJPanelLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(triangleResultJScrollPane)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, triangleJPanelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 87, Short.MAX_VALUE)
                        .addComponent(triangleCalculateJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(81, 81, 81))))
        );
        triangleJPanelLayout.setVerticalGroup(
            triangleJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(triangleJPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(triangleJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(triangleJPanelLayout.createSequentialGroup()
                        .addComponent(triangleInputsJPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(triangleInstructionsJScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(triangleJPanelLayout.createSequentialGroup()
                        .addComponent(triangleCalculateJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27)
                        .addComponent(triangleResultJScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        geometriesJTabbedPane.addTab("Triangle", triangleJPanel);

        circleJPanel.setBackground(new java.awt.Color(153, 204, 255));

        circleInputsJPanel.setBackground(new java.awt.Color(153, 204, 255));
        circleInputsJPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Points"));
        circleInputsJPanel.setLayout(new java.awt.GridLayout(1, 2, 3, 3));

        radiusJLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        radiusJLabel.setText("Radius:");
        circleInputsJPanel.add(radiusJLabel);
        circleInputsJPanel.add(radiusJTextField);

        circleInstructionsJTextArea.setEditable(false);
        circleInstructionsJTextArea.setColumns(20);
        circleInstructionsJTextArea.setLineWrap(true);
        circleInstructionsJTextArea.setRows(5);
        circleInstructionsJTextArea.setText("Enter the radius of the circle in order to calculate it's circumference and area.");
        circleInstructionsJTextArea.setWrapStyleWord(true);
        circleInstructionsJScrollPane.setViewportView(circleInstructionsJTextArea);

        circleResultJTextArea.setEditable(false);
        circleResultJTextArea.setColumns(20);
        circleResultJTextArea.setLineWrap(true);
        circleResultJTextArea.setRows(5);
        circleResultJTextArea.setWrapStyleWord(true);
        circleResultJScrollPane.setViewportView(circleResultJTextArea);

        circleCalculateJButton.setText("Calculate");
        circleCalculateJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                circleCalculateJButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout circleJPanelLayout = new javax.swing.GroupLayout(circleJPanel);
        circleJPanel.setLayout(circleJPanelLayout);
        circleJPanelLayout.setHorizontalGroup(
            circleJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(circleJPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(circleJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(circleInputsJPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(circleInstructionsJScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 216, Short.MAX_VALUE))
                .addGroup(circleJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(circleJPanelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 49, Short.MAX_VALUE)
                        .addComponent(circleResultJScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 291, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(31, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, circleJPanelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(circleCalculateJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(90, 90, 90))))
        );
        circleJPanelLayout.setVerticalGroup(
            circleJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(circleJPanelLayout.createSequentialGroup()
                .addGroup(circleJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(circleJPanelLayout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addComponent(circleInputsJPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 41, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, circleJPanelLayout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(circleCalculateJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)))
                .addGroup(circleJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(circleJPanelLayout.createSequentialGroup()
                        .addComponent(circleInstructionsJScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(circleJPanelLayout.createSequentialGroup()
                        .addComponent(circleResultJScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );

        geometriesJTabbedPane.addTab("Circle", circleJPanel);

        rectangleJPanel.setBackground(new java.awt.Color(204, 204, 255));

        rectangleInputsJPanel.setBackground(new java.awt.Color(204, 204, 255));
        rectangleInputsJPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Dimensions"));
        rectangleInputsJPanel.setLayout(new java.awt.GridLayout(2, 2, 3, 3));

        widthJLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        widthJLabel.setText("Width:");
        rectangleInputsJPanel.add(widthJLabel);

        widthJTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                widthJTextFieldActionPerformed(evt);
            }
        });
        rectangleInputsJPanel.add(widthJTextField);

        heightJLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        heightJLabel.setText("Height:");
        rectangleInputsJPanel.add(heightJLabel);

        heightJTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                heightJTextFieldActionPerformed(evt);
            }
        });
        rectangleInputsJPanel.add(heightJTextField);

        rectangleInstructionsJTextArea.setEditable(false);
        rectangleInstructionsJTextArea.setColumns(20);
        rectangleInstructionsJTextArea.setLineWrap(true);
        rectangleInstructionsJTextArea.setRows(5);
        rectangleInstructionsJTextArea.setText("Enter the width and height of the rectangle in order to calculate it's perimeter and area.");
        rectangleInstructionsJTextArea.setWrapStyleWord(true);
        rectangleInstructionsJScrollPane.setViewportView(rectangleInstructionsJTextArea);

        rectangleCalculateJButton.setText("Calculate");
        rectangleCalculateJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rectangleCalculateJButtonActionPerformed(evt);
            }
        });

        rectangleResultJTextArea.setEditable(false);
        rectangleResultJTextArea.setColumns(20);
        rectangleResultJTextArea.setLineWrap(true);
        rectangleResultJTextArea.setRows(5);
        rectangleResultJTextArea.setWrapStyleWord(true);
        rectangleResultJScrollPane.setViewportView(rectangleResultJTextArea);

        javax.swing.GroupLayout rectangleJPanelLayout = new javax.swing.GroupLayout(rectangleJPanel);
        rectangleJPanel.setLayout(rectangleJPanelLayout);
        rectangleJPanelLayout.setHorizontalGroup(
            rectangleJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(rectangleJPanelLayout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(rectangleJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(rectangleInputsJPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 240, Short.MAX_VALUE)
                    .addComponent(rectangleInstructionsJScrollPane))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 43, Short.MAX_VALUE)
                .addGroup(rectangleJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, rectangleJPanelLayout.createSequentialGroup()
                        .addComponent(rectangleResultJScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, rectangleJPanelLayout.createSequentialGroup()
                        .addComponent(rectangleCalculateJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(65, 65, 65))))
        );
        rectangleJPanelLayout.setVerticalGroup(
            rectangleJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(rectangleJPanelLayout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(rectangleJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(rectangleJPanelLayout.createSequentialGroup()
                        .addComponent(rectangleCalculateJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(rectangleResultJScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(rectangleJPanelLayout.createSequentialGroup()
                        .addComponent(rectangleInputsJPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(22, 22, 22)
                        .addComponent(rectangleInstructionsJScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(21, Short.MAX_VALUE))
        );

        geometriesJTabbedPane.addTab("Rectangle", rectangleJPanel);

        parallelogramJPanel.setBackground(new java.awt.Color(153, 255, 153));

        rectangleInputsJPanel1.setBackground(new java.awt.Color(153, 255, 153));
        rectangleInputsJPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Dimensions"));
        rectangleInputsJPanel1.setLayout(new java.awt.GridLayout(3, 2, 3, 3));

        widthJLabel1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        widthJLabel1.setText("Width:");
        rectangleInputsJPanel1.add(widthJLabel1);

        widthJTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                widthJTextField1ActionPerformed(evt);
            }
        });
        rectangleInputsJPanel1.add(widthJTextField1);

        heightJLabel1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        heightJLabel1.setText("Height:");
        rectangleInputsJPanel1.add(heightJLabel1);

        heightJTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                heightJTextField1ActionPerformed(evt);
            }
        });
        rectangleInputsJPanel1.add(heightJTextField1);

        lengthJLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lengthJLabel.setText("Length:");
        rectangleInputsJPanel1.add(lengthJLabel);

        lengthJTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lengthJTextFieldActionPerformed(evt);
            }
        });
        rectangleInputsJPanel1.add(lengthJTextField);

        parallelogramInstructionsJTextArea.setEditable(false);
        parallelogramInstructionsJTextArea.setColumns(20);
        parallelogramInstructionsJTextArea.setLineWrap(true);
        parallelogramInstructionsJTextArea.setRows(5);
        parallelogramInstructionsJTextArea.setText("Enter the width, height, and length of the parallelogram in order to calculate it's perimeter and area.");
        parallelogramInstructionsJTextArea.setWrapStyleWord(true);
        parallelogramInstructionsJScrollPane.setViewportView(parallelogramInstructionsJTextArea);

        parallelogramCalculateJButton.setText("Calculate");
        parallelogramCalculateJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                parallelogramCalculateJButtonActionPerformed(evt);
            }
        });

        parallelogramResultJTextArea.setEditable(false);
        parallelogramResultJTextArea.setColumns(20);
        parallelogramResultJTextArea.setLineWrap(true);
        parallelogramResultJTextArea.setRows(5);
        parallelogramResultJTextArea.setWrapStyleWord(true);
        parallelogramResultJScrollPane.setViewportView(parallelogramResultJTextArea);

        javax.swing.GroupLayout parallelogramJPanelLayout = new javax.swing.GroupLayout(parallelogramJPanel);
        parallelogramJPanel.setLayout(parallelogramJPanelLayout);
        parallelogramJPanelLayout.setHorizontalGroup(
            parallelogramJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(parallelogramJPanelLayout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(parallelogramJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(rectangleInputsJPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 240, Short.MAX_VALUE)
                    .addComponent(parallelogramInstructionsJScrollPane))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 43, Short.MAX_VALUE)
                .addGroup(parallelogramJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, parallelogramJPanelLayout.createSequentialGroup()
                        .addComponent(parallelogramResultJScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, parallelogramJPanelLayout.createSequentialGroup()
                        .addComponent(parallelogramCalculateJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(65, 65, 65))))
        );
        parallelogramJPanelLayout.setVerticalGroup(
            parallelogramJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(parallelogramJPanelLayout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(parallelogramJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(parallelogramJPanelLayout.createSequentialGroup()
                        .addComponent(parallelogramCalculateJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(parallelogramResultJScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(parallelogramJPanelLayout.createSequentialGroup()
                        .addComponent(rectangleInputsJPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(22, 22, 22)
                        .addComponent(parallelogramInstructionsJScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(21, Short.MAX_VALUE))
        );

        geometriesJTabbedPane.addTab("Parallelogram", parallelogramJPanel);

        fileJMenu.setText("File");

        clearJMenuItem.setText("Clear");
        clearJMenuItem.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                clearJMenuItemMouseEntered(evt);
            }
        });
        clearJMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearJMenuItemActionPerformed(evt);
            }
        });
        fileJMenu.add(clearJMenuItem);

        printJMenuItem.setText("Print");
        printJMenuItem.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                printJMenuItemMouseEntered(evt);
            }
        });
        printJMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printJMenuItemActionPerformed(evt);
            }
        });
        fileJMenu.add(printJMenuItem);

        printFormJMenuItem.setText("Print Form");
        printFormJMenuItem.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                printFormJMenuItemMouseEntered(evt);
            }
        });
        printFormJMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printFormJMenuItemActionPerformed(evt);
            }
        });
        fileJMenu.add(printFormJMenuItem);

        exitJMenuItem.setText("Exit");
        exitJMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitJMenuItemActionPerformed(evt);
            }
        });
        fileJMenu.add(exitJMenuItem);

        geometriesJMenuBar.add(fileJMenu);

        panelJMenu.setText("Geometry");

        mainJMenuItem.setText("Main Panel");
        mainJMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mainJMenuItemActionPerformed(evt);
            }
        });
        panelJMenu.add(mainJMenuItem);

        triangleJMenuItem.setText("Triangle");
        triangleJMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                triangleJMenuItemActionPerformed(evt);
            }
        });
        panelJMenu.add(triangleJMenuItem);

        circleJMenuItem.setText("Circle");
        circleJMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                circleJMenuItemActionPerformed(evt);
            }
        });
        panelJMenu.add(circleJMenuItem);

        rectangleJMenuItem.setText("Rectangle");
        rectangleJMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rectangleJMenuItemActionPerformed(evt);
            }
        });
        panelJMenu.add(rectangleJMenuItem);

        parallelogramJMenuItem.setText("Parallelogram");
        parallelogramJMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                parallelogramJMenuItemActionPerformed(evt);
            }
        });
        panelJMenu.add(parallelogramJMenuItem);

        geometriesJMenuBar.add(panelJMenu);

        drawJMenu.setText("Draw Figures");

        drawTriangleJMenuItem.setText("Draw Triangle");
        drawJMenu.add(drawTriangleJMenuItem);

        drawCircleJMenuItem.setText("Draw Circle");
        drawJMenu.add(drawCircleJMenuItem);

        drawRectangleJMenuItem.setText("Draw Rectangle");
        drawJMenu.add(drawRectangleJMenuItem);

        geometriesJMenuBar.add(drawJMenu);

        helpJMenu.setText("Help");

        aboutJMenuItem.setText("About");
        aboutJMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutJMenuItemActionPerformed(evt);
            }
        });
        helpJMenu.add(aboutJMenuItem);

        geometriesJMenuBar.add(helpJMenu);

        setJMenuBar(geometriesJMenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(geometriesJTabbedPane)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(geometriesJTabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, 331, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     *<pre>>
     * Method       clearJMenuItemActionPerformed()
     * Description  Event handler clears all text fields, all text areas, and
     *              class variables and reset focus to first main tab from each
     *              individual panel. Clear displays and any inputs that may
     *              be there and re instantiate class to reset variables. Resets
     *              focus by setting selection of tab (for user to view) as the
     *              main tab
     * @parem       evt ActionEvent
     * @author      <i>Leanne Vu</i>
     * Date         2/15/2021
     * </pre>
     *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/ 
    private void clearJMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearJMenuItemActionPerformed
        geometriesJTabbedPane.setSelectedIndex(0); //sets focus to main tab
        
        //triangle panel - clear text and reset variables
        x1JTextField.setText("");
        y1JTextField.setText("");
        x2JTextField.setText("");
        y2JTextField.setText("");
        x3JTextField.setText("");
        y3JTextField.setText("");
        triangleResultJTextArea.setText("");
        myTriangle = new Triangle(); //re instantiate the Triangle class- reset variables
        
        //circle panel - clear text and reset variables
        radiusJTextField.setText("");
        circleResultJTextArea.setText("");
        myCircle = new Circle();  //re instantiate the Circle class- reset variables
        
        //rectangle panel - clear text and reset variables
        widthJTextField.setText("");
        heightJTextField.setText("");
        rectangleResultJTextArea.setText("");
        myRectangle = new Rectangle();  //re instantiate the Rectangle class- reset variables
        
        //parallelogram panel - clear text and reset variables
        widthJTextField1.setText("");
        heightJTextField1.setText("");
        lengthJTextField.setText("");
        parallelogramResultJTextArea.setText("");
        myParallelogram = new Parallelogram();  //re instantiate the Rectangle class- reset variables
    }//GEN-LAST:event_clearJMenuItemActionPerformed

    private void x1JTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_x1JTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_x1JTextFieldActionPerformed

    private void x2JTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_x2JTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_x2JTextFieldActionPerformed

    private void x3JTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_x3JTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_x3JTextFieldActionPerformed

    private void y1JTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_y1JTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_y1JTextFieldActionPerformed

    private void y2JTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_y2JTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_y2JTextFieldActionPerformed

    private void y3JTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_y3JTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_y3JTextFieldActionPerformed

    private void widthJTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_widthJTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_widthJTextFieldActionPerformed

    private void heightJTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_heightJTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_heightJTextFieldActionPerformed

    /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     *<pre>>
     * Method       printFormJMenuItemActionPerformed()
     * Description  Event handler for printFormJMenuItemActionPerformed to print
     *              the form as a GUI
     * @parem       evt ActionEvent
     * @author      <i>Leanne Vu</i>
     * Date         2/12/2021
     * </pre>
     *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/ 
    private void printFormJMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printFormJMenuItemActionPerformed
        //prints form
        PrintUtilities.printComponent(this);
    }//GEN-LAST:event_printFormJMenuItemActionPerformed

   /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    *<pre>
    * Method        exitJMenuItemActionPerformed()
    * Description   Event handler to close the application
    * @param        evt ActionWvent
    * @see          java.awt.event.ActionEvent
    * @author       <i>Leanne Vu</i>
    * Date          2/12/2021
    *</pre>
    *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
    private void exitJMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitJMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitJMenuItemActionPerformed

   /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    *<pre>
    * Method        aboutJMenuItemActionPerformed() 
    * Description   Event handler for aboutJMenuItem to show the About form
    * parem         evt ActionEvent
    * @author       <i>Leanne Vu</i>	
    * Date          2/12/2021
    *</pre>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
    private void aboutJMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutJMenuItemActionPerformed
        About myAbout = new About(this, true);
        myAbout.setVisible(true);
    }//GEN-LAST:event_aboutJMenuItemActionPerformed

   /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    *<pre>
    * Method        mainJMenuItemActionPerformed() 
    * Description   Event handler selects the geometriesJTabbedPane that has
    *               an index of 0.
    * parem         evt ActionEvent
    * @author       <i>Leanne Vu</i>	
    * Date          2/12/2021
    *</pre>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
    private void mainJMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mainJMenuItemActionPerformed
        geometriesJTabbedPane.setSelectedIndex(0);
    }//GEN-LAST:event_mainJMenuItemActionPerformed

   /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    *<pre>
    * Method        triangleJMenuItemActionPerformed() 
    * Description   Event handler selects the geometriesJTabbedPane that has
    *               an index of 1.
    * parem         evt ActionEvent
    * @author       <i>Leanne Vu</i>	
    * Date          2/12/2021
    *</pre>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
    private void triangleJMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_triangleJMenuItemActionPerformed
        geometriesJTabbedPane.setSelectedIndex(1);
    }//GEN-LAST:event_triangleJMenuItemActionPerformed

   /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    *<pre>
    * Method        circleJMenuItemActionPerformed() 
    * Description   Event handler selects the geometriesJTabbedPane that has
    *               an index of 2.
    * parem         evt ActionEvent
    * @author       <i>Leanne Vu</i>	
    * Date          2/12/2021
    *</pre>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
    private void circleJMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_circleJMenuItemActionPerformed
        geometriesJTabbedPane.setSelectedIndex(2);
    }//GEN-LAST:event_circleJMenuItemActionPerformed

   /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    *<pre>
    * Method        rectangleJMenuItemActionPerformed() 
    * Description   Event handler selects the geometriesJTabbedPane that has
    *               an index of 3.
    * parem         evt ActionEvent
    * @author       <i>Leanne Vu</i>	
    * Date          2/12/2021
    *</pre>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
    private void rectangleJMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rectangleJMenuItemActionPerformed
        geometriesJTabbedPane.setSelectedIndex(3);
    }//GEN-LAST:event_rectangleJMenuItemActionPerformed

   /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    *<pre>
    * Method        triangleJLabelMouseClicked() 
    * Description   Calling the index for the JComboBox - which calls the event
    *               for the selected index
    * parem         evt ActionEvent
    * @author       <i>Leanne Vu</i>	
    * Date          2/12/2021
    *</pre>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
    private void triangleJLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_triangleJLabelMouseClicked
        figureJComboBox.setSelectedIndex(1);
    }//GEN-LAST:event_triangleJLabelMouseClicked

   /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    *<pre>
    * Method        figureJComboBoxItemsStateChanged() 
    * Description   Passes the index, so it allows to move from one panel to another
    *               using the figureJComboIndex index to specify what tab in the
    *               geometriesJTabbedPane
    * parem         evt ActionEvent
    * @author       <i>Leanne Vu</i>	
    * Date          2/12/2021
    *</pre>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
    private void figureJComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_figureJComboBoxItemStateChanged
        //Select appropriate tab
        int figureIndex = figureJComboBox.getSelectedIndex(); //index in figureIndex
        geometriesJTabbedPane.setSelectedIndex(figureIndex); //use figureIndex to move tab
    }//GEN-LAST:event_figureJComboBoxItemStateChanged

   /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    *<pre>
    * Method        circleJLabelMouseClicked() 
    * Description   Calling the index for the JComboBox - which calls the event
    *               for the selected index
    * parem         evt ActionEvent
    * @author       <i>Leanne Vu</i>	
    * Date          2/12/2021
    *</pre>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
    private void circleJLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_circleJLabelMouseClicked
        figureJComboBox.setSelectedIndex(2);
    }//GEN-LAST:event_circleJLabelMouseClicked

   /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    *<pre>
    * Method        rectangleJLabelMouseClicked() 
    * Description   Calling the index for the JComboBox - which calls the event
    *               for the selected index
    * parem         evt ActionEvent
    * @author       <i>Leanne Vu</i>	
    * Date          2/12/2021
    *</pre>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
    private void rectangleJLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rectangleJLabelMouseClicked
        figureJComboBox.setSelectedIndex(3);
    }//GEN-LAST:event_rectangleJLabelMouseClicked

   /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    *<pre>
    * Method        triangleJLabelMouseEntered() 
    * Description   Sets a tooltiptext to allow users to know that clicking on
    *               the triangle image will open the triangle JPanel for 
    *               calculations.
    * parem         evt ActionEvent
    * @author       <i>Leanne Vu</i>	
    * Date          2/12/2021
    *</pre>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
    private void triangleJLabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_triangleJLabelMouseEntered
        triangleJLabel.setToolTipText("Click on the triangle figure open triangle JPanel");
    }//GEN-LAST:event_triangleJLabelMouseEntered

   /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    *<pre>
    * Method        circleJLabelMouseEntered() 
    * Description   Sets a tooltiptext to allow users to know that clicking on
    *               the circle imagle will open the circle JPanel for any
    *               calculations.
    * parem         evt ActionEvent
    * @author       <i>Leanne Vu</i>	
    * Date          2/12/2021
    *</pre>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
    private void circleJLabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_circleJLabelMouseEntered
        circleJLabel.setToolTipText("Click on point inside the circle figure open circle JPanel");
    }//GEN-LAST:event_circleJLabelMouseEntered

   /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    *<pre>
    * Method        rectangleJLabelMouseEntered() 
    * Description   Sets a tooltiptext to allow users to know that clicking on
    *               the rectangle imagle will open the rectangle JPanel for any
    *               calculations.
    * parem         evt ActionEvent
    * @author       <i>Leanne Vu</i>	
    * Date          2/12/2021
    *</pre>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
    private void rectangleJLabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rectangleJLabelMouseEntered
        rectangleJLabel.setToolTipText("Click on point inside the rectangle figure open rectangle JPanel");
    }//GEN-LAST:event_rectangleJLabelMouseEntered

   /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    *<pre>
    * Method        triangleCalculateJButtonActionPerformed() 
    * Description   Calculates the perimeter and area and also checks for any
    *               invalidation of input using the Validation class. Also checks
    *               whether the sides work as a triangle and are valid if the
    *               sum of every pair of two edges is greater than the remaining
    *               edge. Also display other properties of the triangle.
    * parem         evt ActionEvent
    * @author       <i>Leanne Vu</i>	
    * Date          2/12/2021
    *</pre>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
    private void triangleCalculateJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_triangleCalculateJButtonActionPerformed
        double vertexX1, vertexY1, vertexX2, vertexY2, vertexX3, vertexY3, side1,
                side2, side3, perimeter, area;
        boolean goodTriangle = false;
        Random rand = new Random();
        invalidInput = false;
        
        // if one of the methods return true, that means the input is not valid because
        // these methods are specified for the invalidity of the input
        //x1, y1
        if (Validation.isNotDouble(x1JTextField.getText())) {
            x1JTextField.requestFocus();
            invalidInput = true;
            //provide tooltiptext so user knows what the invalid input is
            x1JTextField.setToolTipText(x1JTextField.getToolTipText()
                       + "--Not a double") ;        
        } else if (Validation.isEmpty(x1JTextField.getText()) == true) {
            x1JTextField.requestFocus();
            invalidInput = true;
            //provide tooltiptext so user knows what the invalid input is
            x1JTextField.setToolTipText(x1JTextField.getToolTipText()
                       + "--Empty input") ;
        } else if (Validation.isNotDouble(y1JTextField.getText())) {
            y1JTextField.requestFocus();
            invalidInput = true;
            y1JTextField.setToolTipText(y1JTextField.getToolTipText()
                       + "--Not a double") ;
        } else if (Validation.isEmpty(y1JTextField.getText()) == true) {
            y1JTextField.requestFocus();
            invalidInput = true;
            y1JTextField.setToolTipText(y1JTextField.getToolTipText()
                       + "--Empty input") ;
        } 
        
        //x2, y2 check for invalid input of whether it is not a double or 
        //an empty text field
        else if (Validation.isNotDouble(x2JTextField.getText())) {
            x2JTextField.requestFocus();
            invalidInput = true;
            x2JTextField.setToolTipText(x2JTextField.getToolTipText()
                       + "--Not a double") ;
        }else if (Validation.isEmpty(x2JTextField.getText()) == true) {
            x2JTextField.requestFocus();
            invalidInput = true;
            x2JTextField.setToolTipText(x2JTextField.getToolTipText()
                       + "--Empty input") ;
        } else if (Validation.isNotDouble(y2JTextField.getText())) {
            y2JTextField.requestFocus();
            invalidInput = true;
            y2JTextField.setToolTipText(y2JTextField.getToolTipText()
                       + "--Not a double") ;
        } else if (Validation.isEmpty(y2JTextField.getText()) == true) {
            y2JTextField.requestFocus();
            invalidInput = true;
            y2JTextField.setToolTipText(y2JTextField.getToolTipText()
                       + "--Empty input") ;
        } 
        
        //check for invalid input of whether it is not a double or 
        //an empty text field
        else if (Validation.isNotDouble(x3JTextField.getText())) {
            x3JTextField.requestFocus();
            invalidInput = true;
            x3JTextField.setToolTipText(x3JTextField.getToolTipText()
                       + "--Not a double") ;
            triangleResultJTextArea.setText("9?");
        } else if (Validation.isEmpty(x3JTextField.getText()) == true) {
            x3JTextField.requestFocus();
            invalidInput = true;
            x3JTextField.setToolTipText(widthJTextField.getToolTipText()
                       + "--Empty input") ;
            triangleResultJTextArea.setText("10?");
        } else if (Validation.isNotDouble(y3JTextField.getText())) {
            y3JTextField.requestFocus();
            invalidInput = true;
            y3JTextField.setToolTipText(y3JTextField.getToolTipText()
                       + "--Not a double") ;
            triangleResultJTextArea.setText("11?");
        } else if (Validation.isEmpty(y3JTextField.getText()) == true) {
            y3JTextField.requestFocus();
            invalidInput = true;
            y3JTextField.setToolTipText(y3JTextField.getToolTipText()
                       + "--Empty input") ;
            triangleResultJTextArea.setText("12?");
        } else {
            invalidInput = false;
        }
        
        //use boolean invalidInput to determine if any of the values are invalid. If invalid, true. Elsewise, it is false.
        if (invalidInput == false) { 
            try {
            //clear output
            output.delete(0, output.length());
            //get input
            vertexX1 = Double.parseDouble(x1JTextField.getText());
            vertexY1 = Double.parseDouble(y1JTextField.getText());
            vertexX2 = Double.parseDouble(x2JTextField.getText());
            vertexY2 = Double.parseDouble(y2JTextField.getText());
            vertexX3 = Double.parseDouble(x3JTextField.getText());
            vertexY3 = Double.parseDouble(y3JTextField.getText());
            
            //instantiate Triangle class to prepare for upcoming calculations necessary
            myTriangle = new Triangle(vertexX1, vertexY1, vertexX2, vertexY2,
                    vertexX3, vertexY3);
            
            //calculate edges
            side1 = myTriangle.distance(vertexX1, vertexY1, vertexX2, vertexY2);
            side2 = myTriangle.distance(vertexX1, vertexY1, vertexX3, vertexY3);
            side3 = myTriangle.distance(vertexX2, vertexY2, vertexX3, vertexY3);
            
            //verify if valid triangle (necessary for triangles, alongside if checking for invalid inputs)
            goodTriangle = myTriangle.isValidTriangle(side1, side2, side3);
            boolean flag = rand.nextBoolean();
            myTriangle.setFilled(flag);
            
            //calculate perimeter and area
            if(goodTriangle) {
                perimeter = myTriangle.getPerimeter();  //side1 + side2 +side3;
                //calculate area via Heron's formula
                area = myTriangle.getArea();
                
                //****OPTIONAL - calculate area via determinants method
//                area = myTriangle.getArea(vertexX1, vertexY1, vertexX2, vertexY2,
//                        vertexX3, vertexY3);
                
                String isFilled = (myTriangle.isFilled() ? "is filled" : 
                        "is not filled");
                output.append("The perimeter of the triangle with vertices " + 
                        "(" + vertexX1 + ", " + vertexY1 + "), (" + vertexX2 +
                        ", " + vertexY2 + "), (" + vertexX3 + ", " + vertexY3 +
                        ") is " + twoDecimals.format(perimeter) + "\nThe area of"
                                + " the same triangle is " + twoDecimals.format(area) +
                        "\nThe triangle's color is " + myTriangle.getColor() +
                        "\nThe triangle's filled is " + myTriangle.isFilled() +
                        "\nThe triangle's date created is " +
                        myTriangle.getDateCreated());
                        triangleResultJTextArea.setText(output.toString());
            } else {
                output.append("Illegal sides for the triangle!");
                triangleResultJTextArea.setText(output.toString());
                }
            }   
            //try catch method in case anything goes wrong after input invalidation checks
            catch(NumberFormatException exp) {
                JOptionPane.showMessageDialog(this, "Coordinates must be doubles",
                    "Input Error", JOptionPane.ERROR_MESSAGE);
                x1JTextField.requestFocus();
                x1JTextField.selectAll();
            }
        }
        else { //Let user know that the input entered is invalid 
               //(because boolean invalidInput is true (saying yes, these inputs are invalid))
            output.delete(0, output.length());
            output.append("Inputs are invalid for the triangle!");
            triangleResultJTextArea.setText(output.toString());
        }
        
       
    }//GEN-LAST:event_triangleCalculateJButtonActionPerformed

   /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    *<pre>
    * Method        circleCalculateJButtonActionPerformed() 
    * Description   Calculate circle circumference and area using radius input and
    *               check whether an inout is invalid by using methods from the 
    *               Validation class. Also display other properties of the circle.
    * parem         evt ActionEvent
    * @author       <i>Leanne Vu</i>	
    * Date          2/17/2021
    *</pre>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
    private void circleCalculateJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_circleCalculateJButtonActionPerformed
        double radius, perimeter, area;
        Random rand = new Random();
        
        // if one of the methods return true, that means the input is not valid because
        // these methods are specified for the invalidity of the input
        if (Validation.isNotDouble(radiusJTextField.getText())) {
            radiusJTextField.requestFocus();
            invalidInput = true;
            //provide tooltiptext so user knows what the invalid input is (not a double)
            radiusJTextField.setToolTipText(radiusJTextField.getToolTipText()
                       + "--Not a double") ;
        } else if (Validation.isNegative(radiusJTextField.getText()) == true) {
            radiusJTextField.requestFocus();
            invalidInput = true;
            //provide tooltiptext so user knows what the invalid input is (negative number)
            radiusJTextField.setToolTipText(radiusJTextField.getToolTipText()
                       + "--Negative number") ; 
        } else if (Validation.isEmpty(radiusJTextField.getText()) == true) {
            radiusJTextField.requestFocus();
            invalidInput = true;
            //provide tooltiptext so user knows what the invalid input (empty input)
            radiusJTextField.setToolTipText(radiusJTextField.getToolTipText()
                       + "--Empty input") ;
        } else {
            invalidInput = false;
        }
        
        //use boolean invalidInput to determine if any of the values are invalid. If invalid, true. Elsewise, it is false.
        if (invalidInput == false) //all input is valid because boolean is false
        {
            try {
            //clear output
            output.delete(0, output.length());
            //get input
            radius = Double.parseDouble(radiusJTextField.getText());

            //instaniate rectangle Class to use methods for calculations, as well as displaying color and fill
            myCircle = new Circle(radius);
            boolean flag = rand.nextBoolean();
            myRectangle.setFilled(flag);
            
            //calculate circumference (perimeter) and area
                perimeter = myCircle.getPerimeter();  //2*PI*radius using formula from Circle class
                area = myCircle.getArea(); //PI * radius ^2 using formula from Circle class
                
                String isFilled = (myCircle.isFilled() ? "is filled" : 
                        "is not filled");
                
                //display calculations in circleResultJTextArea
                output.append("The circumference of the circle with radius " + 
                        "(" + radius + ") is " + twoDecimals.format(perimeter) + 
                        "\nThe area of the same circle is " + twoDecimals.format(area) +
                        "\nThe circle's color is " + myCircle.getColor() +
                        "\nThe circle's filled is " + myCircle.isFilled() +
                        "\nThe circle's date created is " +
                        myTriangle.getDateCreated());
                        circleResultJTextArea.setText(output.toString());
        }
            //try catch method in case anything goes wrong after input invalidation checks
            catch(NumberFormatException exp) {
                output.delete(0, output.length());
                JOptionPane.showMessageDialog(this, "Input not valid",
                    "Input Error", JOptionPane.ERROR_MESSAGE);
                radiusJTextField.requestFocus();
                radiusJTextField.selectAll();
            }
        }
        else { //Let user know that the input entered is invalid 
                //(because boolean invalidInput is true (saying yes, these inputs are invalid))
            output.delete(0, output.length());
            output.append("Illegal radius for the circle!");
            circleResultJTextArea.setText(output.toString());
        }
                
    }//GEN-LAST:event_circleCalculateJButtonActionPerformed

   /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    *<pre>
    * Method        rectangleCalculateJButtonActionPerformed() 
    * Description   Calculate rectangle perimeter and area using height and
    *               width input  and check whether an inout is invalid by using
    *               methods from the validation class. Also display other
    *               properties of the rectangle.
    * parem         evt ActionEvent
    * @author       <i>Leanne Vu</i>	
    * Date          2/17/2021
    *</pre>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
    private void rectangleCalculateJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rectangleCalculateJButtonActionPerformed
        double height, width, perimeter, area;
        Random rand = new Random();
        // if one of the methods return true, that means the input is not valid because
        // these methods are specified for the invalidity of the input
        if (Validation.isNotDouble(widthJTextField.getText())) {
            widthJTextField.requestFocus();
            invalidInput = true;
            //provide tooltiptext so user knows what the invalid input is (not a double)
            widthJTextField.setToolTipText(widthJTextField.getToolTipText()
                       + "--Not a double") ;
        } else if (Validation.isNegative(widthJTextField.getText()) == true) {
            widthJTextField.requestFocus();
            invalidInput = true;
            //provide tooltiptext so user knows what the invalid input is (negative number)
            widthJTextField.setToolTipText(widthJTextField.getToolTipText()
                       + "--Negative number") ;
        } else if (Validation.isEmpty(widthJTextField.getText()) == true) {
            widthJTextField.requestFocus();
            invalidInput = true;
            //provide tooltiptext so user knows what the invalid input is (empty input)
            widthJTextField.setToolTipText(widthJTextField.getToolTipText()
                       + "--Empty input") ;
        } else if (Validation.isNotDouble(heightJTextField.getText())) {
            heightJTextField.requestFocus();
            invalidInput = true;
            heightJTextField.setToolTipText(heightJTextField.getToolTipText()
                       + "--Not a double") ;
        } else if (Validation.isNegative(heightJTextField.getText()) == true) {
            heightJTextField.requestFocus();
            invalidInput = true;
            heightJTextField.setToolTipText(heightJTextField.getToolTipText()
                       + "--Negative number") ;
        } else if (Validation.isEmpty(heightJTextField.getText()) == true) {
            heightJTextField.requestFocus();
            invalidInput = true;
            heightJTextField.setToolTipText(heightJTextField.getToolTipText()
                       + "--Empty input") ;
        } else {
            invalidInput = false;
        }
        
        //use boolean invalidInput to determine if any of the values are invalid. If invalid, true. Elsewise, it is false.
        if (invalidInput == false) { //all input is valid because boolean is false
            try {
                //clear output
                output.delete(0, output.length());
                //get input
                height = Double.parseDouble(heightJTextField.getText());
                width = Double.parseDouble(widthJTextField.getText());
                
                //instaniate rectangle Class to use methods for calculations, as well as displaying/set color and fill
                myRectangle = new Rectangle(width, height);
                boolean flag = rand.nextBoolean();
                myRectangle.setFilled(flag);
                //calculate perimeter and area
                perimeter = myRectangle.getPerimeter();  //2height+2width using method from Rectangle class
                area = myRectangle.getArea(); //width*height using method from rectangle class
                
                String isFilled = (myRectangle.isFilled() ? "is filled" : 
                        "is not filled");
                
                //display calculations in circleResultJTextArea
                output.append("The perimeter of the circle with width " + 
                        "(" + width + ") and height (" + height + ") is " + twoDecimals.format(perimeter) + 
                        "\nThe area of the same rectangle is " + twoDecimals.format(area) +
                        "\nThe rectangle's color is " + myRectangle.getColor() +
                        "\nThe rectangle's filled is " + myRectangle.isFilled() +
                        "\nThe rectangle's date created is " +
                        myRectangle.getDateCreated());
                        rectangleResultJTextArea.setText(output.toString());
            }
            
            //try catch method in case anything goes wrong after input invalidation checks
            catch(NumberFormatException exp) {
                JOptionPane.showMessageDialog(this, "Input not valid",
                    "Input Error", JOptionPane.ERROR_MESSAGE);
                widthJTextField.requestFocus();
                widthJTextField.selectAll();
            }
        } 
        else {  //Let user know that one of the inputs entered is invalid 
                //(because boolean invalidInput is true (saying yes, these inputs are invalid))
            output.delete(0, output.length());
            output.append("Illegal height or width side for the rectangle!");
            rectangleResultJTextArea.setText(output.toString());
        }

    }//GEN-LAST:event_rectangleCalculateJButtonActionPerformed

   /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    *<pre>
    * Method        printFormJMenuItem() 
    * Description   Sets a tooltipTest so user knows what the print menuItem does.
    *               Prints form as GUI.
    * parem         evt ActionEvent
    * @author       <i>Leanne Vu</i>	
    * Date          2/17/2021
    *</pre>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
    private void printFormJMenuItemMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_printFormJMenuItemMouseEntered
        printFormJMenuItem.setToolTipText("Print GUI form");
    }//GEN-LAST:event_printFormJMenuItemMouseEntered

   /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    *<pre>
    * Method        clearJMenuItemMouseEntered() 
    * Description   Sets a tooltipText so user knows what the clear menuItem does.
    *               Clears all text field and all text areas.
    * parem         evt ActionEvent
    * @author       <i>Leanne Vu</i>	
    * Date          2/17/2021
    *</pre>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
    private void clearJMenuItemMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_clearJMenuItemMouseEntered
        clearJMenuItem.setToolTipText("Clear all text fields and all text areas");
    }//GEN-LAST:event_clearJMenuItemMouseEntered

   /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    *<pre>
    * Method        geometriesJTabbedPaneStateChanged() 
    * Description   Keep track of tab changes and set default calculate button
    *               based on the selected tab. Uses switch statement to keep
    *               track of what the selected idex is.
    * parem         evt ActionEvent
    * @author       <i>Leanne Vu</i>	
    * Date          2/18/2021
    *</pre>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
    private void geometriesJTabbedPaneStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_geometriesJTabbedPaneStateChanged
        //if selected tab matches the certain button, then it will set default button
        //to that certain button
        switch (geometriesJTabbedPane.getSelectedIndex()) {
            case 1: //checks if index is for triangle panel, if it is- sets default button to the triangleCalculateJButton
                this.getRootPane().setDefaultButton(triangleCalculateJButton);
                break;
            case 2: //checks if index is for circle panel, if it is- sets default button to the circleCalculateJButton
                this.getRootPane().setDefaultButton(circleCalculateJButton);
                break;
            case 3: //checks if index is for rectangle panel, if it is- sets default button to the rectangleJButton
                this.getRootPane().setDefaultButton(rectangleCalculateJButton);
                break;
            case 4: //checks if index is for parallelogram panel, if it is- sets default button to the parallelogramCalculateJButton
                this.getRootPane().setDefaultButton(parallelogramCalculateJButton);
                break;
            default:
                break;
        }
    }//GEN-LAST:event_geometriesJTabbedPaneStateChanged

   /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     *<pre>>
     * Method       printJMenuItemActionPerformed()
     * Description  Event handler to print details of result calculations
     * @parem       evt ActionEvent
     * @author      <i>Leanne Vu</i>
     * Date         2/15/2021
     * </pre>
     *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/ 
    private void printJMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printJMenuItemActionPerformed
        //PrintUtilities.printComponenet(this);
        JTextArea output = new JTextArea();
        
        //creates JTextArea to display calculations from the triangleResult, circleResult
        //and rectangleResult
        output.setText(triangleResultJTextArea.getText() + "\n" + circleResultJTextArea.getText()
        + "\n" + rectangleResultJTextArea.getText() + parallelogramResultJTextArea);
        
        //print the JTextArea created that displays the calculations
        try {
            output.print();
        } catch (PrinterException ex) { //create catch 
//            Logger.getLogger(GeometriesGUI.class.getName()).log(Level.SEVERE,
//                    null, ex);
            JOptionPane.showMessageDialog(this, "Unable to print",
                    "Printer Error", JOptionPane.ERROR_MESSAGE);
            x1JTextField.requestFocus();
            x1JTextField.selectAll();
        }
    }//GEN-LAST:event_printJMenuItemActionPerformed

    private void widthJTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_widthJTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_widthJTextField1ActionPerformed

    private void heightJTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_heightJTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_heightJTextField1ActionPerformed

   /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    *<pre>
    * Method        parallelogramCalculateJButtonActionPerformed() 
    * Description   Calculate parallelogram perimeter and area using height,
    *               width, and length input and check whether an inout is 
    *               invalid by using methods from the validation class. Also 
    *               display other properties of the parallelogram.
    * parem         evt ActionEvent
    * @author       <i>Leanne Vu</i>	
    * Date          2/17/2021
    *</pre>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
    private void parallelogramCalculateJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_parallelogramCalculateJButtonActionPerformed
        double height, width, length, perimeter, area;
        Random rand = new Random();
        // if one of the methods return true, that means the input is not valid because
        // these methods are specified for the invalidity of the input
        if (Validation.isNotDouble(widthJTextField1.getText())) {
            widthJTextField1.requestFocus();
            invalidInput = true;
            //provide tooltiptext so user knows what the invalid input is (not a double)
            widthJTextField1.setToolTipText(widthJTextField1.getToolTipText()
                       + "--Not a double") ;
        } else if (Validation.isNegative(widthJTextField1.getText()) == true) {
            widthJTextField1.requestFocus();
            invalidInput = true;
            //provide tooltiptext so user knows what the invalid input is (negative)
            widthJTextField1.setToolTipText(widthJTextField1.getToolTipText()
                       + "--Negative number") ;
        } else if (Validation.isEmpty(widthJTextField1.getText()) == true) {
            widthJTextField1.requestFocus();
            invalidInput = true;
            //provide tooltiptext so user knows what the invalid input is (empty)
            widthJTextField1.setToolTipText(widthJTextField1.getToolTipText()
                       + "--Empty input") ;
        } 
        //height
        else if (Validation.isNotDouble(heightJTextField1.getText())) {
            heightJTextField1.requestFocus();
            invalidInput = true;
            heightJTextField1.setToolTipText(heightJTextField1.getToolTipText()
                       + "--Not a double") ;
        } else if (Validation.isNegative(heightJTextField1.getText()) == true) {
            heightJTextField1.requestFocus();
            invalidInput = true;
            heightJTextField1.setToolTipText(heightJTextField1.getToolTipText()
                       + "--Negative number") ;
        } else if (Validation.isEmpty(heightJTextField1.getText()) == true) {
            heightJTextField1.requestFocus();
            invalidInput = true;
            heightJTextField1.setToolTipText(heightJTextField1.getToolTipText()
                       + "--Empty input") ;
        } 
        
        //length
        else if (Validation.isNotDouble(lengthJTextField.getText())) {
            lengthJTextField.requestFocus();
            invalidInput = true;
            lengthJTextField.setToolTipText(lengthJTextField.getToolTipText()
                       + "--Not a double") ;
        } else if (Validation.isNegative(lengthJTextField.getText()) == true) {
            lengthJTextField.requestFocus();
            invalidInput = true;
            lengthJTextField.setToolTipText(lengthJTextField.getToolTipText()
                       + "--Negative number") ;
        } else if (Validation.isEmpty(lengthJTextField.getText()) == true) {
            lengthJTextField.requestFocus();
            invalidInput = true;
            lengthJTextField.setToolTipText(lengthJTextField.getToolTipText()
                       + "--Empty input") ;
        } else {
            invalidInput = false;
        }
        
        //use boolean invalidInput to determine if any of the values are invalid. If invalid, true. Elsewise, it is false.
        if (invalidInput == false) { //all input is valid because boolean is false
            try {
                //clear output
                output.delete(0, output.length());
                //get input
                height = Double.parseDouble(heightJTextField1.getText());
                width = Double.parseDouble(widthJTextField1.getText());
                length = Double.parseDouble(lengthJTextField.getText());
                
                //instaniate parallelogram Class to use methods for calculations, as well as displaying/set color and fill
                myParallelogram = new Parallelogram(width, height, length);
                boolean flag = rand.nextBoolean();
                myParallelogram.setFilled(flag);
                //calculate perimeter and area
                perimeter = myParallelogram.getPerimeter();  //2height+2width using method from Rectangle class
                area = myParallelogram.getArea(); //width*height using method from parallelogram class
                
                String isFilled = (myParallelogram.isFilled() ? "is filled" : 
                        "is not filled");
                
                //display calculations in circleResultJTextArea
                output.append("The perimeter of the circle with width " + 
                        "(" + width + ") and height (" + height + ") is " + twoDecimals.format(perimeter) + 
                        "\nThe area of the same parallelogram is " + twoDecimals.format(area) +
                        "\nThe parallelogram's color is " + myParallelogram.getColor() +
                        "\nThe parallelogram's filled is " + myParallelogram.isFilled() +
                        "\nThe parallelogram's date created is " +
                        myParallelogram.getDateCreated());
                        parallelogramResultJTextArea.setText(output.toString());
            }
            
            //try catch method in case anything goes wrong after input invalidation checks
            catch(NumberFormatException exp) {
                JOptionPane.showMessageDialog(this, "Input not valid",
                    "Input Error", JOptionPane.ERROR_MESSAGE);
                widthJTextField1.requestFocus();
                widthJTextField1.selectAll();
            }
        } 
        else {  //Let user know that one of the inputs entered is invalid 
                //(because boolean invalidInput is true (saying yes, these inputs are invalid))
            output.delete(0, output.length());
            output.append("Illegal height, width, or length for the parallelogram!");
            parallelogramResultJTextArea.setText(output.toString());
        }
    }//GEN-LAST:event_parallelogramCalculateJButtonActionPerformed

    private void lengthJTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lengthJTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_lengthJTextFieldActionPerformed

    /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    *<pre>
    * Method        parallelogramJLabelMouseClicked() 
    * Description   Calling the index for the JComboBox - which calls the event
    *               for the selected index
    * parem         evt ActionEvent
    * @author       <i>Leanne Vu</i>	
    * Date          2/18/2021
    *</pre>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
    private void parallelogramJLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_parallelogramJLabelMouseClicked
        figureJComboBox.setSelectedIndex(4);
    }//GEN-LAST:event_parallelogramJLabelMouseClicked

   /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    *<pre>
    * Method        parallelogramJLabelMouseEntered() 
    * Description   sets tooltiptext for user to know that clicking on the point
    *               will open out the parallelogram panel for necessary 
    *               calculations.
    * parem         evt ActionEvent
    * @author       <i>Leanne Vu</i>	
    * Date          2/18/2021
    *</pre>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
    private void parallelogramJLabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_parallelogramJLabelMouseEntered
        parallelogramJLabel.setToolTipText("Click on point inside the parallelogram figure to open parallelogram JPanel");
    }//GEN-LAST:event_parallelogramJLabelMouseEntered

   /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    *<pre>
    * Method        parallelogramJMenuItemActionPerformed() 
    * Description   Event handler selects the geometriesJTabbedPane that has
    *               an index of 3.
    * parem         evt ActionEvent
    * @author       <i>Leanne Vu</i>	
    * Date          2/18/2021
    *</pre>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
    private void parallelogramJMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_parallelogramJMenuItemActionPerformed
        geometriesJTabbedPane.setSelectedIndex(4);
    }//GEN-LAST:event_parallelogramJMenuItemActionPerformed

   /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    *<pre>
    * Method        printFormJMenuItem() 
    * Description   Sets a tooltipTest so user knows what the print menuItem does.
    *               Prints results of calculations from all panels.
    * parem         evt ActionEvent
    * @author       <i>Leanne Vu</i>	
    * Date          2/18/2021
    *</pre>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
    private void printJMenuItemMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_printJMenuItemMouseEntered
        printJMenuItem.setToolTipText("Print all calculations");
    }//GEN-LAST:event_printJMenuItemMouseEntered
    
   /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    *<pre>
    * Method        parametricPointInTriangle() 
    * Description   Decide whether or not the triangle is inside- otherwise it is outside
    * parem         evt ActionEvent
    * @author       <i>Leanne Vu</i>	
    * Date          2/15/2021
    *</pre>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
    private boolean parametricPointInTriangle(float x1, float y1, float x2, float y2,
            float x3, float y3, float x, float y) {
        float denominator = (x1 * (y2-y3) + y1 * (x3-x2) + x2 * y3 - y2 * x3);
        float t1 = (x*(y3-y1) + y * (x1-x3) - x1 * y3 + y1 * x3) / denominator;
        float t2 = (x* (y2-y1) + y * (x1-x2) - x1*y2 + y1*x2) / -denominator;
        float s = t1+t2;
        
        return 0 <= t1 && t1 <= 1 && 0 <= t2 && t2 <= 1 && s <= 1;
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GeometriesGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GeometriesGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GeometriesGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GeometriesGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        //splash screen
        Splash mySplash = new Splash(3000);
        mySplash.showSplash();

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GeometriesGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutJMenuItem;
    private javax.swing.JButton circleCalculateJButton;
    private javax.swing.JPanel circleInputsJPanel;
    private javax.swing.JScrollPane circleInstructionsJScrollPane;
    private javax.swing.JTextArea circleInstructionsJTextArea;
    private javax.swing.JLabel circleJLabel;
    private javax.swing.JMenuItem circleJMenuItem;
    private javax.swing.JPanel circleJPanel;
    private javax.swing.JScrollPane circleResultJScrollPane;
    private javax.swing.JTextArea circleResultJTextArea;
    private javax.swing.JMenuItem clearJMenuItem;
    private javax.swing.JMenuItem drawCircleJMenuItem;
    private javax.swing.JMenu drawJMenu;
    private javax.swing.JMenuItem drawRectangleJMenuItem;
    private javax.swing.JMenuItem drawTriangleJMenuItem;
    private javax.swing.JMenuItem exitJMenuItem;
    private javax.swing.JComboBox<String> figureJComboBox;
    private javax.swing.JMenu fileJMenu;
    private javax.swing.JMenuBar geometriesJMenuBar;
    private javax.swing.JTabbedPane geometriesJTabbedPane;
    private javax.swing.JLabel heightJLabel;
    private javax.swing.JLabel heightJLabel1;
    private javax.swing.JTextField heightJTextField;
    private javax.swing.JTextField heightJTextField1;
    private javax.swing.JMenu helpJMenu;
    private javax.swing.JTextArea instructionsJTextArea;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JLabel lengthJLabel;
    private javax.swing.JTextField lengthJTextField;
    private javax.swing.JMenuItem mainJMenuItem;
    private javax.swing.JPanel mainJPanel;
    private javax.swing.JMenu panelJMenu;
    private javax.swing.JButton parallelogramCalculateJButton;
    private javax.swing.JScrollPane parallelogramInstructionsJScrollPane;
    private javax.swing.JTextArea parallelogramInstructionsJTextArea;
    private javax.swing.JLabel parallelogramJLabel;
    private javax.swing.JMenuItem parallelogramJMenuItem;
    private javax.swing.JPanel parallelogramJPanel;
    private javax.swing.JScrollPane parallelogramResultJScrollPane;
    private javax.swing.JTextArea parallelogramResultJTextArea;
    private javax.swing.JMenuItem printFormJMenuItem;
    private javax.swing.JMenuItem printJMenuItem;
    private javax.swing.JLabel radiusJLabel;
    private javax.swing.JTextField radiusJTextField;
    private javax.swing.JButton rectangleCalculateJButton;
    private javax.swing.JPanel rectangleInputsJPanel;
    private javax.swing.JPanel rectangleInputsJPanel1;
    private javax.swing.JScrollPane rectangleInstructionsJScrollPane;
    private javax.swing.JTextArea rectangleInstructionsJTextArea;
    private javax.swing.JLabel rectangleJLabel;
    private javax.swing.JMenuItem rectangleJMenuItem;
    private javax.swing.JPanel rectangleJPanel;
    private javax.swing.JScrollPane rectangleResultJScrollPane;
    private javax.swing.JTextArea rectangleResultJTextArea;
    private javax.swing.JLabel selectJLabel;
    private javax.swing.JLabel titleJLabel;
    private javax.swing.JButton triangleCalculateJButton;
    private javax.swing.JPanel triangleInputsJPanel;
    private javax.swing.JScrollPane triangleInstructionsJScrollPane;
    private javax.swing.JLabel triangleJLabel;
    private javax.swing.JMenuItem triangleJMenuItem;
    private javax.swing.JPanel triangleJPanel;
    private javax.swing.JScrollPane triangleResultJScrollPane;
    private javax.swing.JTextArea triangleResultJTextArea;
    private javax.swing.JLabel widthJLabel;
    private javax.swing.JLabel widthJLabel1;
    private javax.swing.JTextField widthJTextField;
    private javax.swing.JTextField widthJTextField1;
    private javax.swing.JLabel x1JLabel;
    private javax.swing.JTextField x1JTextField;
    private javax.swing.JLabel x2JLabel;
    private javax.swing.JTextField x2JTextField;
    private javax.swing.JLabel x3JLabel;
    private javax.swing.JTextField x3JTextField;
    private javax.swing.JLabel y1JLabel;
    private javax.swing.JTextField y1JTextField;
    private javax.swing.JLabel y2JLabel;
    private javax.swing.JTextField y2JTextField;
    private javax.swing.JLabel y3JLabel;
    private javax.swing.JTextField y3JTextField;
    // End of variables declaration//GEN-END:variables
}
